import openml
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

def load_and_preprocess_data(dataset_id=1464):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ OpenML, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–¥–∏—Ä—É—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
    """
    dataset = openml.datasets.get_dataset(dataset_id)
    df, *_ = dataset.get_data()

    print("üîπ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    print(df.head())

    label_encoder = LabelEncoder()
    for column in df.select_dtypes(include=["object"]).columns:
        df[column] = label_encoder.fit_transform(df[column])

    target_column = "Class" if "Class" in df.columns else df.columns[-1]
    features = df.drop(target_column, axis=1)
    target = df[target_column]

    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)
    return X_train, X_test, y_train, y_test

def train_model(X_train, X_test, y_train, y_test):
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å RandomForestClassifier –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –µ—ë –∫–∞—á–µ—Å—Ç–≤–µ.
    """
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    report = classification_report(y_test, y_pred)
    
    report_path = "report.md"
    with open(report_path, "w") as f:
        f.write("## –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")
        f.write(f"**–ú–æ–¥–µ–ª—å:** RandomForestClassifier\n")
        f.write(f"**–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏:**\n{report}\n")

    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}")
    return model, report

if __name__ == "__main__":
    dataset_id = 1464
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    X_train, X_test, y_train, y_test = load_and_preprocess_data(dataset_id)

    print("üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model, report = train_model(X_train, X_test, y_train, y_test)

    print("üìä –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

