import pandas as pd
import openml
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

def load_and_preprocess_data(dataset_id=1464):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ OpenML, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–¥–∏—Ä—É—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
    """
    try:
        dataset = openml.datasets.get_dataset(dataset_id)
        df, *_ = dataset.get_data()

        print("üîπ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
        print(df.head())

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å LabelEncoder
        label_encoder = LabelEncoder()
        for column in df.select_dtypes(include=["object"]).columns:
            df[column] = label_encoder.fit_transform(df[column])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ('Class' –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞)
        target_column = "Class" if "Class" in df.columns else df.columns[-1]
        features = df.drop(target_column, axis=1)
        target = df[target_column]

        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

        return X_train, X_test, y_train, y_test
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None, None, None

def train_model(X_train, y_train):
    """
    –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å RandomForestClassifier –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å.
    """
    try:
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞.")
        return model
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None

def evaluate_model(model, X_test, y_test):
    """
    –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç.
    """
    try:
        y_pred = model.predict(X_test)
        report = classification_report(y_test, y_pred)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
        report_path = "report.md"
        with open(report_path, "w", encoding="utf-8") as f:
            f.write("## –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")
            f.write(f"**–ú–æ–¥–µ–ª—å:** RandomForestClassifier\n")
            f.write(f"**–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏:**\n{report}\n")

        print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {report_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –º–æ–¥–µ–ª–∏: {e}")

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    X_train, X_test, y_train, y_test = load_and_preprocess_data()

    if X_train is not None and y_train is not None:
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = train_model(X_train, y_train)

        if model is not None:
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
            evaluate_model(model, X_test, y_test)
