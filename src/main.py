import openml
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from data_analysis import load_data, exploratory_data_analysis
from model_training import train_model
from code_updater import update_code
from commit_message import generate_commit_message


def load_and_preprocess_data(dataset_id):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ OpenML, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–¥–∏—Ä—É—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    dataset = openml.datasets.get_dataset(dataset_id)
    df, *_ = dataset.get_data()

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("üîπ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
    print(df.head())

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å LabelEncoder
    label_encoder = LabelEncoder()
    for column in df.select_dtypes(include=["object"]).columns:
        df[column] = label_encoder.fit_transform(df[column])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–µ—Å–ª–∏ 'Class' –Ω–µ—Ç, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É)
    target_column = "Class" if "Class" in df.columns else df.columns[-1]
    features = df.drop(target_column, axis=1)
    target = df[target_column]

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.3, random_state=42)

    return X_train, X_test, y_train, y_test


if __name__ == "__main__":
    dataset_id = 1464  # ID –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö OpenML

    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    X_train, X_test, y_train, y_test = load_and_preprocess_data(dataset_id)

    print("üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    print("üìä –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏...")
    y_pred = model.predict(X_test)
    report = classification_report(y_test, y_pred)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
    report_path = "report.md"
    with open(report_path, "w") as f:
        f.write("## –û—Ç—á–µ—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")
        f.write(f"**–ú–æ–¥–µ–ª—å:** RandomForestClassifier\n")
        f.write(f"**–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏:**\n{report}\n")

    print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Gemini API
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Gemini...")
    update_code()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞
    commit_msg = generate_commit_message(changes_summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö OpenML")

    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: {commit_msg}")

